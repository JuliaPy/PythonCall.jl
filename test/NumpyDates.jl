@testitem "Date -> DateTime64/InlineDateTime64" begin
    using Dates
    using PythonCall: NumpyDates

    # Mapping from NumPy unit symbols to NumpyDates Unit constants
    const UNIT_CONST = Dict(
        :Y => NumpyDates.YEARS,
        :M => NumpyDates.MONTHS,
        :D => NumpyDates.DAYS,
        :h => NumpyDates.HOURS,
        :m => NumpyDates.MINUTES,
        :s => NumpyDates.SECONDS,
        :ms => NumpyDates.MILLISECONDS,
        :us => NumpyDates.MICROSECONDS,
        :ns => NumpyDates.NANOSECONDS,
    )

    # Data generated by: uv run scripts/np_dates_all_units.py
    # Format: (Date, unit_symbol, numpy_int_value)
    cases = [
        (Date(1969, 12, 31), :Y, -1),
        (Date(1969, 12, 31), :M, -1),
        (Date(1969, 12, 31), :D, -1),
        (Date(1969, 12, 31), :h, -24),
        (Date(1969, 12, 31), :m, -1440),
        (Date(1969, 12, 31), :s, -86400),
        (Date(1969, 12, 31), :ms, -86400000),
        (Date(1969, 12, 31), :us, -86400000000),
        (Date(1969, 12, 31), :ns, -86400000000000),
        (Date(1970, 1, 1), :Y, 0),
        (Date(1970, 1, 1), :M, 0),
        (Date(1970, 1, 1), :D, 0),
        (Date(1970, 1, 1), :h, 0),
        (Date(1970, 1, 1), :m, 0),
        (Date(1970, 1, 1), :s, 0),
        (Date(1970, 1, 1), :ms, 0),
        (Date(1970, 1, 1), :us, 0),
        (Date(1970, 1, 1), :ns, 0),
        (Date(1970, 1, 2), :Y, 0),
        (Date(1970, 1, 2), :M, 0),
        (Date(1970, 1, 2), :D, 1),
        (Date(1970, 1, 2), :h, 24),
        (Date(1970, 1, 2), :m, 1440),
        (Date(1970, 1, 2), :s, 86400),
        (Date(1970, 1, 2), :ms, 86400000),
        (Date(1970, 1, 2), :us, 86400000000),
        (Date(1970, 1, 2), :ns, 86400000000000),
        (Date(1999, 12, 31), :Y, 29),
        (Date(1999, 12, 31), :M, 359),
        (Date(1999, 12, 31), :D, 10956),
        (Date(1999, 12, 31), :h, 262944),
        (Date(1999, 12, 31), :m, 15776640),
        (Date(1999, 12, 31), :s, 946598400),
        (Date(1999, 12, 31), :ms, 946598400000),
        (Date(1999, 12, 31), :us, 946598400000000),
        (Date(1999, 12, 31), :ns, 946598400000000000),
        (Date(2000, 2, 29), :Y, 30),
        (Date(2000, 2, 29), :M, 361),
        (Date(2000, 2, 29), :D, 11016),
        (Date(2000, 2, 29), :h, 264384),
        (Date(2000, 2, 29), :m, 15863040),
        (Date(2000, 2, 29), :s, 951782400),
        (Date(2000, 2, 29), :ms, 951782400000),
        (Date(2000, 2, 29), :us, 951782400000000),
        (Date(2000, 2, 29), :ns, 951782400000000000),
        (Date(1900, 1, 1), :Y, -70),
        (Date(1900, 1, 1), :M, -840),
        (Date(1900, 1, 1), :D, -25567),
        (Date(1900, 1, 1), :h, -613608),
        (Date(1900, 1, 1), :m, -36816480),
        (Date(1900, 1, 1), :s, -2208988800),
        (Date(1900, 1, 1), :ms, -2208988800000),
        (Date(1900, 1, 1), :us, -2208988800000000),
        (Date(1900, 1, 1), :ns, -2208988800000000000),
        (Date(2100, 1, 1), :Y, 130),
        (Date(2100, 1, 1), :M, 1560),
        (Date(2100, 1, 1), :D, 47482),
        (Date(2100, 1, 1), :h, 1139568),
        (Date(2100, 1, 1), :m, 68374080),
        (Date(2100, 1, 1), :s, 4102444800),
        (Date(2100, 1, 1), :ms, 4102444800000),
        (Date(2100, 1, 1), :us, 4102444800000000),
        (Date(2100, 1, 1), :ns, 4102444800000000000),
    ]

    for (d, usym, expected) in cases
        # 1) DateTime64 with UnitArg symbol
        dt64 = NumpyDates.DateTime64(d, usym)
        @test Dates.value(dt64) == expected

        # 2) InlineDateTime64 with type parameter Unit constant
        Uconst = UNIT_CONST[usym]
        inline_typed = NumpyDates.InlineDateTime64{Uconst}(d)
        @test Dates.value(inline_typed) == expected

        # 3) InlineDateTime64 with runtime UnitArg symbol
        inline_dyn = NumpyDates.InlineDateTime64(d, usym)
        @test Dates.value(inline_dyn) == expected
        @test NumpyDates.unitpair(inline_dyn) == NumpyDates.unitpair(usym)
    end
end
