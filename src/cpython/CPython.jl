"""
    module CPython

This module provides a direct interface to the Python C API.
"""
module C

if isdefined(Base, :Experimental) && isdefined(Base.Experimental, Symbol("@optlevel"))
    @eval Base.Experimental.@compiler_options optimize=1 infer=no
end

if isdefined(Base, :Experimental) && isdefined(Base.Experimental, Symbol("@max_methods"))
    @eval Base.Experimental.@max_methods 1
end

import Base: @kwdef
import CondaPkg
import Pkg
using Libdl, Requires, UnsafePointers, Serialization, ..Utils

include("consts.jl")
include("pointers.jl")
include("extras.jl")
include("context.jl")
include("gil.jl")
include("jlwrap.jl")

function __init__()
    init_context()
    with_gil() do
        init_jlwrap()
    end
end

precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})

precompile(Tuple{typeof(C.__init__)})
precompile(Tuple{typeof(C.init_context)})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, Bool})
precompile(Tuple{typeof(Base.getproperty), C.Context, Symbol})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, Symbol})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, String})
precompile(Tuple{C.var"#python_cmd#40", Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, Ptr{Nothing}})
precompile(Tuple{typeof(C.init_pointers)})
precompile(Tuple{typeof(C.init_pointers), C.CAPIPointers, Ptr{Nothing}})
precompile(Tuple{typeof(Base.setproperty!), C.CAPIPointers, Symbol, Ptr{Nothing}})
precompile(Tuple{Type{Ptr{Ptr{C.PyObject}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Ptr{C.PyObject}}})
precompile(Tuple{typeof(Base.setproperty!), C.CAPIPointers, Symbol, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.with_gil), Function})
precompile(Tuple{typeof(C.with_gil), C.var"#34#42"{C.var"#python_cmd#40"}, Bool})
precompile(Tuple{typeof(C._atpyexit)})
precompile(Tuple{C.var"#34#42"{C.var"#python_cmd#40"}})
precompile(Tuple{typeof(C.Py_IsInitialized)})
precompile(Tuple{typeof(Base.getproperty), C.CAPIPointers, Symbol})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, Array{Int32, 1}})
precompile(Tuple{typeof(C.Py_SetPythonHome), Ptr{Int32}})
precompile(Tuple{typeof(C.Py_SetProgramName), Ptr{Int32}})
precompile(Tuple{typeof(C.Py_InitializeEx), Int64})
precompile(Tuple{typeof(C.Py_AtExit), Ptr{Nothing}})
precompile(Tuple{typeof(C.with_gil), C.var"#39#47", Bool})
precompile(Tuple{C.var"#39#47"})
precompile(Tuple{typeof(C.Py_GetVersion)})
precompile(Tuple{typeof(Base.setproperty!), C.Context, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(C.with_gil), C.var"#58#59", Bool})
precompile(Tuple{C.var"#58#59"})
precompile(Tuple{typeof(C._pyjl_callmethod), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_isnull), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_reduce), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_serialize), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_deserialize), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_get_buffer), Ptr{C.PyObject}, Ptr{C.Py_buffer}, Int32})
precompile(Tuple{typeof(C._pyjl_release_buffer), Ptr{C.PyObject}, Ptr{C.Py_buffer}})
precompile(Tuple{typeof(C._pyjl_new), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C._pyjl_dealloc), Ptr{C.PyObject}})
precompile(Tuple{typeof(C.init_jlwrap)})
precompile(Tuple{typeof(Base.empty!), Array{C.PyMethodDef, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :meth, :flags), Tuple{Ptr{UInt8}, Ptr{Nothing}, UInt16}}, Type{C.PyMethodDef}})
precompile(Tuple{C.var"##PyMethodDef#4", Ptr{UInt8}, Ptr{Nothing}, UInt16, Ptr{Nothing}, Type{C.PyMethodDef}})
precompile(Tuple{Type{C.PyMethodDef}, Ptr{UInt8}, Ptr{Nothing}, UInt16, Ptr{Nothing}})
precompile(Tuple{Type{C.PyMethodDef}})
precompile(Tuple{C.var"##PyMethodDef#4", Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}, Type{C.PyMethodDef}})
precompile(Tuple{Type{C.PyMethodDef}, Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.push!), Array{C.PyMethodDef, 1}, C.PyMethodDef, C.PyMethodDef, C.PyMethodDef, Vararg{C.PyMethodDef}})
precompile(Tuple{typeof(Base.append!), Array{C.PyMethodDef, 1}, Tuple{C.PyMethodDef, C.PyMethodDef, C.PyMethodDef, C.PyMethodDef, C.PyMethodDef, C.PyMethodDef}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:get, :release), Tuple{Ptr{Nothing}, Ptr{Nothing}}}, Type{C.PyBufferProcs}})
precompile(Tuple{C.var"##PyBufferProcs#10", Ptr{Nothing}, Ptr{Nothing}, Type{C.PyBufferProcs}})
precompile(Tuple{Type{C.PyBufferProcs}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{C.PyBufferProcs, 0}, C.PyBufferProcs})
precompile(Tuple{typeof(Base.pointer), Array{C.PyMethodDef, 1}})
precompile(Tuple{typeof(Base.pointer), Array{C.PyBufferProcs, 0}})
precompile(Tuple{Type{NamedTuple{(:name, :basicsize, :new, :dealloc, :flags, :weaklistoffset, :methods, :as_buffer), T} where T<:Tuple}, Tuple{Ptr{UInt8}, Int64, Ptr{Nothing}, Ptr{Nothing}, UInt32, UInt64, Ptr{C.PyMethodDef}, Ptr{C.PyBufferProcs}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :basicsize, :new, :dealloc, :flags, :weaklistoffset, :methods, :as_buffer), Tuple{Ptr{UInt8}, Int64, Ptr{Nothing}, Ptr{Nothing}, UInt32, UInt64, Ptr{C.PyMethodDef}, Ptr{C.PyBufferProcs}}}, Type{C.PyTypeObject}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:name, :basicsize, :new, :dealloc, :flags, :weaklistoffset, :methods, :as_buffer), Tuple{Ptr{UInt8}, Int64, Ptr{Nothing}, Ptr{Nothing}, UInt32, UInt64, Ptr{C.PyMethodDef}, Ptr{C.PyBufferProcs}}}, Symbol})
precompile(Tuple{Type{C.PyVarObject}})
precompile(Tuple{Type{C.PyObject}})
precompile(Tuple{C.var"##PyObject#2", Int64, Ptr{Nothing}, Type{C.PyObject}})
precompile(Tuple{Type{C.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{C.var"##PyVarObject#3", C.PyObject, Int64, Type{C.PyVarObject}})
precompile(Tuple{Type{C.PyVarObject}, C.PyObject, Int64})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:name, :basicsize, :new, :dealloc, :flags, :weaklistoffset, :methods, :as_buffer), Tuple{Ptr{UInt8}, Int64, Ptr{Nothing}, Ptr{Nothing}, UInt32, UInt64, Ptr{C.PyMethodDef}, Ptr{C.PyBufferProcs}}}, Symbol})
precompile(Tuple{C.var"##PyTypeObject#13", C.PyVarObject, Ptr{UInt8}, Int64, Int64, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{C.PyBufferProcs}, UInt32, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, UInt64, Ptr{Nothing}, Ptr{Nothing}, Ptr{C.PyMethodDef}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}, Type{C.PyTypeObject}})
precompile(Tuple{Type{C.PyTypeObject}, C.PyVarObject, Ptr{UInt8}, Int64, Int64, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{C.PyBufferProcs}, UInt32, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, UInt64, Ptr{Nothing}, Ptr{Nothing}, Ptr{C.PyMethodDef}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Int64, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{C.PyVarObject}, C.PyVarObject})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyNumberMethods}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PySequenceMethods}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyMappingMethods}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyBufferProcs}}, Ptr{C.PyBufferProcs}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyMethodDef}}, Ptr{C.PyMethodDef}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyMemberDef}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyGetSetDef}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyObject}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{C.PyTypeObject, 0}, C.PyTypeObject})
precompile(Tuple{typeof(Base.pointer), Array{C.PyTypeObject, 0}})
precompile(Tuple{Type{Ptr{C.PyObject}}, Ptr{C.PyTypeObject}})
precompile(Tuple{typeof(C.PyType_Ready), Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{C.PyObject}}, Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{C.PyObject}}, Ptr{C.PyObject}})
#precompile(Tuple{typeof(C.with_gil), PythonCall.var"#172#176", Bool})
precompile(Tuple{typeof(C.PyUnicode_DecodeUTF8), Ptr{UInt8}, Int64, Ptr{Nothing}})
#precompile(Tuple{typeof(PythonCall.errval), Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.:(==)), Ptr{C.PyObject}, Ptr{C.PyObject}})
#precompile(Tuple{typeof(PythonCall.pynew), Ptr{C.PyObject}})
#precompile(Tuple{Type{PythonCall.Py}, Base.Val{:new}, Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{C.PyObject}}, Ptr{C.PyObject}})
#precompile(Tuple{typeof(PythonCall.setptr!), PythonCall.Py, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyImport_Import), Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.:(!=)), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.Py_DecRef), Ptr{C.PyObject}})
#precompile(Tuple{typeof(PythonCall.incref), Ptr{C.PyObject}})
precompile(Tuple{typeof(C.Py_IncRef), Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_GetAttr), Ptr{C.PyObject}, Ptr{C.PyObject}})
#precompile(Tuple{typeof(C.with_gil), PythonCall.var"#1#2"{PythonCall.Py}, Bool})
precompile(Tuple{typeof(C.PyTuple_New), Int64})
precompile(Tuple{typeof(C.PyLong_FromLongLong), Int64})
precompile(Tuple{typeof(C.PyTuple_SetItem), Ptr{C.PyObject}, Int64, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_CallObject), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PySequence_Contains), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_SetItem), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyUnicode_AsUTF8String), Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyBytes_AsStringAndSize), Ptr{C.PyObject}, Base.RefValue{Ptr{Int8}}, Base.RefValue{Int64}})
precompile(Tuple{typeof(C.PyObject_GetItem), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_SetAttr), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyJulia_MethodNum), Any})
precompile(Tuple{typeof(C.PyDict_New)})
precompile(Tuple{typeof(C.PyJuliaValue_New), Ptr{C.PyObject}, Any})
precompile(Tuple{typeof(C.PyType_IsSubtype), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{Type{UnsafePointers.UnsafePtr{C.PyTypeObject}}, Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.getproperty), UnsafePointers.UnsafePtr{C.PyTypeObject}, Symbol})
precompile(Tuple{typeof(UnsafePointers._getproperty), UnsafePointers.UnsafePtr{C.PyTypeObject}, Base.Val{:alloc}})
precompile(Tuple{Type{UnsafePointers.UnsafePtr{C.PyJuliaValueObject}}, Ptr{C.PyObject}})
precompile(Tuple{typeof(Base.getproperty), UnsafePointers.UnsafePtr{C.PyJuliaValueObject}, Symbol})
precompile(Tuple{typeof(UnsafePointers._getproperty), UnsafePointers.UnsafePtr{C.PyJuliaValueObject}, Base.Val{:weaklist}})
precompile(Tuple{typeof(Base.setindex!), UnsafePointers.UnsafePtr{Ptr{C.PyObject}}, Ptr{C.PyObject}})
precompile(Tuple{typeof(UnsafePointers._getproperty), UnsafePointers.UnsafePtr{C.PyJuliaValueObject}, Base.Val{:value}})
precompile(Tuple{typeof(C.PyJuliaValue_SetValue), Ptr{C.PyObject}, Any})
precompile(Tuple{Type{Ref{T} where T}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyUnicode_InternInPlace), Base.RefValue{Ptr{C.PyObject}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{C.PyObject}}}, Base.RefValue{Ptr{C.PyObject}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{C.PyObject}}}, Base.RefValue{Ptr{C.PyObject}}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{C.PyObject}}})
precompile(Tuple{typeof(C.PyNumber_Power), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_RichCompare), Ptr{C.PyObject}, Ptr{C.PyObject}, Int32})
precompile(Tuple{typeof(C.PyObject_IsTrue), Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyList_New), Int64})
precompile(Tuple{typeof(C.PyList_SetItem), Ptr{C.PyObject}, Int64, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_HasAttr), Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyDict_SetItem), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})
precompile(Tuple{typeof(C.PyObject_Call), Ptr{C.PyObject}, Ptr{C.PyObject}, Ptr{C.PyObject}})

end
